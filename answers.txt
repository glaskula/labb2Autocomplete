
/******************************************************************************
** DAT038, TDA417  Datastrukturer och algoritmer, LP2 2020
** Lab 2: Autocomplete
*******************************************************************************/

Name of lab group: Grupp 2
Group member A:    Victor Cousin
Group member B:    Philip Lindström Rabia
Group member C:    Oscar Wallin


/******************************************************************************
** 1. Describe how your firstIndexOf() method in RangeBinarySearch.java
**    finds the first index of a key that equals the search key.
******************************************************************************/
We start by checking if the first element of the sorted array is equal to the search key, if it is then we return this index. If it isn't then we calculate the middle index of the array and compare the value of that index to the key.
Depending on if the value is higher or lower, we change lo or hi and loop this until we find a matching value. When we find a matching value we check the previous element value and if that element isn't matching our key then we have found our first index.
If the previous element also match our search key then we continue going backwards until we have found our first index.


/******************************************************************************
** 2. What is the worst case time complexity in the number of compares
**    that each of the operations in the Autocomplete data type make,
**    as a function of the number of terms n and the number of matching terms m?
******************************************************************************/

sortDictionary():  [Nlog N]

We compare the terms by lexicographic order, using compareToIgnore. Sorting with this comparator results in a complexity of O(n) * O(log(n))

allMatches():  [log N + M log M]

We use binary search two times and the worst-case performance is log(n). O(2*log(n)) = O(log(n)). The for loop takes M in time complexity and the arrays.sort requires M*log(M) (same as sortDictionary but with M). O(M + Mlog(M)) = O(Mlog(M)).
We then add these together and get O(log(n) + Mlog(M)).


numberOfMatches():  [log N]

We use binary search two times and the worst-case performance for our binary search is log(n). O(2*log(n)) = O(log(n)).



/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

Victor Cousin: ~8 hours.
Philip Lindström Rabia: ~8 hours.
Oscar Wallin: ~8 hours.


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

As far as we know, no.


/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

We did not collaborate with any other students.
As for resources, it mainly consisted of the ones included in the course (comparator etc.) and various help from
sites such as StackOverflow, as per usual. This was mainly used when figuring out BinarySearch and the various
TO-DO methods in term.

/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

No serious problems encountered.


/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/


